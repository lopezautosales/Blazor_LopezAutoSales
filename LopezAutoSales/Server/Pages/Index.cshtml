@page "/"
@model IndexModel
@{
    ViewBag.Title = "Inventory";
}


<h1 class="text-center">Inventory</h1>
@if (Model.Cars == null)
{
    <p class="lead">Loading...</p>
}
else if (Model.Cars.Count == 0)
{
    <p class="lead">There's currently no vehicles available.</p>
}
else
{
    <p class="lead">Click on the vehicles to see more information.</p>
    <div class="row">
        @foreach (Car car in Model.Cars)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 mt-2">
                <div class="card card-picture mx-auto">
                    @if (car.Pictures.Any(x => x.IsThumbnail))
                    {
                        <img data-src="/@car.Pictures.First(x => x.IsThumbnail).ThumbnailURL()" class="lazy card-img-top" />
                    }
                    <div class="card-body">
                        <h5 class="card-title">@car.Name()</h5>
                        <p class="card-text">
                            @car.ListPrice.ToString("C") <br />
                            @car.MileageString() miles
                        </p>
                    </div>
                    <div class="text-end mb-3 me-3">
                        <a href="/view/@car.Id" class="card-link">View</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Scripts{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var lazyImages = [].slice.call(document.querySelectorAll("img.lazy"));

            if ("IntersectionObserver" in window) {
                let lazyImageObserver = new IntersectionObserver(function (entries, observer) {
                    entries.forEach(function (entry) {
                        if (entry.isIntersecting) {
                            let lazyImage = entry.target;
                            lazyImage.src = lazyImage.dataset.src;
                            lazyImage.classList.remove("lazy");
                            lazyImageObserver.unobserve(lazyImage);
                        }
                    });
                });

                lazyImages.forEach(function (lazyImage) {
                    lazyImageObserver.observe(lazyImage);
                });
            } else {
                // Possibly fall back to a more compatible method here
            }
        });
    </script>
}