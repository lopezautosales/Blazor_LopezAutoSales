@page "/app/report/{year:int}"
@page "/app/report"
@inject AuthHttp http
@inject IJSRuntime js

<h1 class="text-center">@Year.Value Sales Report</h1>
<div class="no-print row mb-2">
    <div class="col-6">
        <a class="btn btn-secondary" href="/app/report/@(Year-1)">@(Year-1) Report</a>
    </div>
    <div class="col-6 text-end">
        @if (Year != DateTime.Today.Year)
        {
            <a class="btn btn-secondary" href="/app/report/@(Year+1)">@(Year+1) Report</a>
        }
    </div>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Buyers</th>
            <th>Car</th>
            <th>Bought Price</th>
            <th>Sales Price</th>
            <th>Tax</th>
            <th class="no-print">Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (sales != null)
        {
            decimal boughtTotal = 0, sellingTotal = 0, taxTotal = 0;
            @foreach (Sale sale in sales)
            {
                <tr>
                    <td>@sale.Date.ToShortDateString()</td>
                    <td>@sale.Buyers()</td>
                    <td>@sale.Car.Name()</td>
                    <td class="@(sale.Car.BoughtPrice.HasValue ? string.Empty : "bg-danger")">
                        @if (isEditing && editId == sale.Id)
                        {
                            <input type="number" class="form-control form-control-sm" @bind-value="@editAmount" />
                        }
                        else
                        {
                            @sale.Car.BoughtPrice?.ToString("C")
                        }
                    </td>
                    <td>@sale.SellingPrice.ToString("C")</td>
                    <td>@sale.TaxAmount()</td>
                    <td class="no-print">
                        <div class="btn-group" role="group" aria-label="Action buttons">
                            @if (isEditing && editId == sale.Id)
                            {
                                <button type="button" class="btn btn-sm btn-success" @onclick="() => SaveEdit(sale.Id, editAmount)">Save</button>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="CancelEdit">Cancel</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-sm btn-secondary" @onclick="() => StartEditing(sale.Id, sale.Car.BoughtPrice)">Edit</button>
                            }
                        </div>
                    </td>
                </tr>
                boughtTotal += sale.Car.BoughtPrice ?? 0;
                sellingTotal += sale.SellingPrice;
                taxTotal += sale.TaxAmount();
            }
            <tr>
                <td>Profit:</td>
                <td>@((sellingTotal - boughtTotal).ToString("C"))</td>
                <td>Totals:</td>
                <td>@boughtTotal.ToString("C")</td>
                <td>@sellingTotal.ToString("C")</td>
                <td>@taxTotal.ToString("C")</td>
                <td class="no-print"></td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public int? Year { get; set; }
    private List<Sale> sales;
    private decimal? editAmount = null;
    private bool isEditing = false;
    private int? editId = null;

    protected override async Task OnParametersSetAsync()
    {
        if (!Year.HasValue)
            Year = DateTime.Today.Year;
        sales = await http.Client.GetFromJsonAsync<List<Sale>>($"/api/sale/report/{Year.Value}");
        await base.OnParametersSetAsync();
    }

    private void StartEditing(int id, decimal? amount)
    {
        CancelEdit();

        editAmount = amount;
        isEditing = true;
        editId = id;
    }

    private void CancelEdit()
    {
        isEditing = false;
        editId = null;
        editAmount = null;
    }

    private async Task SaveEdit(int id, decimal? boughtPrice)
    {
        if (boughtPrice.HasValue)
        {
            var response = await http.Client.PutAsJsonAsync<decimal?>($"/api/sale/boughtPrice/{id}", boughtPrice);
            if (!response.IsSuccessStatusCode)
            {
                await js.InvokeVoidAsync("alert", "This change could not be saved: " + response.Content.ReadAsStringAsync());
                return;
            }
        }
        else
        {
            var response = await http.Client.DeleteAsync($"/api/sale/boughtPrice/{id}");
            if (!response.IsSuccessStatusCode)
            {
                await js.InvokeVoidAsync("alert", "This change could not be saved: " + response.Content.ReadAsStringAsync());
                return;
            }
        }
        Sale sale = sales.FirstOrDefault(x => x.Id == id);
        if (sale != null)
            sale.Car.BoughtPrice = boughtPrice;
        CancelEdit();
    }
}
