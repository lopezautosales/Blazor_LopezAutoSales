@page "/app/inventory/edit/{id:int}"
@inject AuthHttp auth
@inject HttpClient http
@inject IJSRuntime js
@inject CarManager carManager
@inject NavigationManager nav
@inject VINDecoder decoder

<h1 class="text-center">Edit Vehicle</h1>
@if (car is null)
{
    <p class="lead">Loading...</p>
}
else
{
    <div class="text-right my-2">
        <a class="btn btn-secondary" href="/app/warranty/@car.Id">Warranty</a>
    </div>
    <EditForm Model="car" OnValidSubmit="EditVehicle">
        <DataAnnotationsValidator />
        <ErrorDisplay Errors="Errors" />
        <div class="form-group">
            <label>VIN</label>
            <div class="input-group">
                <InputText class="form-control" @bind-Value="car.VIN"></InputText>
                <div class="input-group-append">
                    <button type="button" class="btn btn-secondary" @onclick="async () => await decoder.TryDecodeAsync(car)">Verify</button>
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-3">
                <label>Year</label>
                <InputNumber class="form-control" @bind-Value="car.Year"></InputNumber>
            </div>
            <div class="form-group col-md-3">
                <label>Make</label>
                <InputText class="form-control" @bind-Value="car.Make"></InputText>
            </div>
            <div class="form-group col-md-3">
                <label>Model</label>
                <InputText class="form-control" @bind-Value="car.Model"></InputText>
            </div>
            <div class="form-group col-md-3">
                <label>Color</label>
                <InputText class="form-control" @bind-Value="car.Color"></InputText>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-3">
                <label>Mileage</label>
                <InputNumber class="form-control" placeholder="Exempt" @bind-Value="car.Mileage"></InputNumber>
            </div>
            <div class="form-group col-md-3">
                <label>Bought Price</label>
                <InputNumber class="form-control" @bind-Value="car.BoughtPrice"></InputNumber>
            </div>
            <div class="form-group col-md-3">
                <label>List Price</label>
                <InputNumber class="form-control" @bind-Value="car.ListPrice"></InputNumber>
            </div>
            <div class="form-group col-md-3 my-auto text-center">
                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="salvageCheck" @bind-Value="car.IsSalvage"></InputCheckbox>
                    <label class="form-check-label" for="salvageCheck">Is Salvage</label>
                </div>
            </div>
        </div>
        <div class="text-right">
            <button type="submit" class="btn btn-secondary">Submit</button>
        </div>
    </EditForm>
    <div class="custom-file my-3">
        <InputFile class="custom-file-input" OnChange="HandleSelection" multiple></InputFile>
        <label class="custom-file-label">
            @if (isLoading)
            {
                <span>Loading...</span>
            }
            else
            {
                <span>Choose images</span>
            }
        </label>
    </div>
    <div class="row">
        @foreach (Picture picture in car.Pictures)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2 mt-2">
                <div class="card card-picture">
                    <img src="@picture.URL" class="card-img-top" />
                    <div class="card-body text-center">
                        @if (!picture.IsThumbnail)
                        {
                            <button class="btn card-link" @onclick="async () => await SetThumbnail(picture)">Set Thumbnail</button>
                        }
                        <button class="btn card-link text-danger" @onclick="async () => await DeletePicture(picture)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Car car;
    private bool isLoading;
    private List<string> Errors { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        car = await carManager.GetCarAsync(auth.Client, Id);
        if (!string.IsNullOrEmpty(car.JsonData))
        {
            decoder.DecodedVIN = car.VIN;
            decoder.JsonData = car.JsonData;
        }
        await base.OnInitializedAsync();
    }

    private async Task EditVehicle()
    {
        await decoder.TryDecodeAsync(car);
        var response = await auth.Client.PutAsJsonAsync<Car>($"/api/inventory/edit/{Id}", car);
        if (response.IsSuccessStatusCode)
        {
            carManager.SetCar(car);
            nav.NavigateTo($"/app/inventory");
        }
        else
            await js.InvokeVoidAsync("alert", response.ReasonPhrase);
    }

    private async Task HandleSelection(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var content = new MultipartFormDataContent();
        int i = 0;
        foreach (var file in e.GetMultipleFiles())
        {
            using System.IO.Stream s = file.OpenReadStream(10000000);
            using System.IO.MemoryStream ms = new System.IO.MemoryStream();
            await s.CopyToAsync(ms);
            content.Add(new ByteArrayContent(ms.GetBuffer()), $"\"upload{i}\"", file.Name);
            i++;
        }
        var response = await auth.Client.PostAsync($"/api/inventory/upload/{Id}", content);
        if (response.IsSuccessStatusCode)
        {
            List<Picture> pictures = await response.Content.ReadFromJsonAsync<List<Picture>>();
            car.Pictures.AddRange(pictures);
        }
        isLoading = false;
    }

    private async Task SetThumbnail(Picture picture)
    {
        if (!picture.IsThumbnail)
        {
            var response = await auth.Client.PutAsJsonAsync($"/api/inventory/thumbnail/{Id}", picture.Id);
            if (response.IsSuccessStatusCode)
            {
                List<Picture> thumbnails = car.Pictures.Where(x => x.IsThumbnail).ToList();
                foreach (Picture removable in thumbnails)
                    removable.IsThumbnail = false;
                picture.IsThumbnail = true;
            }
        }
    }

    private async Task DeletePicture(Picture picture)
    {
        var response = await auth.Client.DeleteAsync($"/api/inventory/picture/{picture.Id}");
        if (response.IsSuccessStatusCode)
        {
            car.Pictures.Remove(picture);
        }
    }
}
