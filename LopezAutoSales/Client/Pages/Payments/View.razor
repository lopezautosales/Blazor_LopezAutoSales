@page "/app/payments/{id:int}"
@attribute [Authorize(Roles = "Admin")]
@inject AuthHttp auth
@inject IJSRuntime js

@if (account is null)
{
    <p class="lead">Loading...</p>
}
else
{
    <h1 class="text-center">Payments for @account.Sale.Car.Name()</h1>
    <h3>@account.Sale.Buyers()</h3>
    <div class="row">
        <div class="col">
            <h6>Down Payment: @account.Sale.DownPayment.ToString("C")</h6>
        </div>
        <div class="col">
            <h6>Purchase Date: @account.Sale.Date.ToShortDateString()</h6>
        </div>
    </div>
    <h5>Initial Due: @account.InitialDue.ToString("C")</h5>
    <h4>Payments</h4>
    <div class="table-responsive">
        <table class="table table-sm table-hover table-striped text-center">
            <thead>
                <tr>
                    <th scope="col">
                        Date
                    </th>
                    <th scope="col">
                        Amount
                    </th>
                    <th class="no-print" scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (Payment payment in account.Payments.OrderBy(x => x.Date))
                {
                    <tr>
                        <td>
                            @payment.Date.ToShortDateString()
                        </td>
                        <td>
                            @payment.Amount.ToString("C")
                        </td>
                        <td class="no-print">
                            @{ string id = $"editPaymentModal{payment.Id}"; }
                            <button class="btn btn-secondary" data-toggle="modal" data-target="#@id">Edit</button>
                            <div class="modal fade" id="@id" tabindex="-1" role="dialog" aria-hidden="true">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Edit Payment</h5>
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <i class="mdi mdi-close"></i>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="form-group">
                                                <label>Original Payment Date:</label>
                                                <input type="datetime" value="@payment.Date" readonly class="form-control" />
                                            </div>
                                            <div class="form-group">
                                                <label>Original Payment Amount:</label>
                                                <input type="number" value="@payment.Amount" readonly class="form-control" />
                                            </div>
                                        </div>
                                        <div class="modal-body">
                                            <div class="form-group">
                                                <label>New Payment Date:</label>
                                                <input type="date" @bind-value="editPayment.Date" class="form-control" />
                                            </div>
                                            <div class="form-group">
                                                <label>New Payment Amount:</label>
                                                <input type="number" @bind-value="editPayment.Amount" class="form-control" />
                                            </div>
                                            <div class="form-group">
                                                <label>Reason:</label>
                                                <input type="text" @bind-value="editPayment.Reason" class="form-control" />
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-danger" @onclick="async () => await Delete(payment, id)">Delete</button>
                                            <button type="button" class="btn btn-success" @onclick="async () => await Save(payment, id)">Save</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <EditForm Model="payment" OnValidSubmit="SubmitPayment">
        <div class="no-print form-row pt-5">
            <div class="form-group col-3">
                <label for="PaymentDate">Date:</label>
                <InputDate class="form-control text-center" placeholder="Payment date..." id="PaymentDate" @bind-Value="payment.Date" />
            </div>
            <div class="form-group col-3">
                <label for="PaymentAmount">Amount</label>
                <InputNumber class="form-control text-center" placeholder="Payment amount..." id="PaymentAmount" @bind-Value="payment.Amount" />
            </div>
            <div class="form-group text-right mt-auto col">
                <button class="btn btn-secondary" type="submit">Submit</button>
            </div>
        </div>
    </EditForm>
    <div class="text-right font-weight-bold">
        Balance: @account.Balance().ToString("C")
    </div>
    <div class="table-responsive mt-5 no-print">
        <table class="table text-center">
            <thead>
                <tr>
                    <th>
                        Contract Ends
                    </th>
                    <th>
                        Late Due
                    </th>
                    <th>
                        Monthly Payments
                    </th>
                    <th>
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        @account.ExpirationDate().ToShortDateString()
                    </td>
                    <td>
                        @account.LateDue().ToString("C")
                    </td>
                    <td>
                        @account.MonthlyPayment.ToString("C")
                    </td>
                    <td>
                        <div class="btn-group no-print" role="group">
                            <button class="btn btn-secondary" type="button" @onclick="Print"><i class="mdi mdi-printer"></i> Print</button>
                            <a class="btn btn-secondary" href="/app/papers/view/@account.SaleId" target="_blank">View Papers</a>
                            <a class="btn btn-secondary" href="/app/papers/edit/@account.SaleId" target="_blank">Edit Papers</a>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}


@code {
        [Parameter]
        public int Id { get; set; }
    private Account account;
    private Payment payment = new Payment();
    private Payment editPayment = new Payment();

    protected override async Task OnInitializedAsync()
    {
        account = await auth.Client.GetFromJsonAsync<Account>($"/api/account/{Id}");
        if (account != null)
        {
            payment.AccountId = Id;
            editPayment.AccountId = Id;
            payment.Amount = editPayment.Amount = account.MonthlyPayment;
        }
        await base.OnInitializedAsync();
    }

    private async Task SubmitPayment()
    {
        if (account.Balance() - payment.Amount < 0 && !(await js.InvokeAsync<bool>("confirm", "Balance will be negative. Are you sure?")))
            return;
        var response = await auth.Client.PostAsJsonAsync("/api/account/payment", payment);
        if (response.IsSuccessStatusCode)
        {
            payment.Id = int.Parse(await response.Content.ReadAsStringAsync());
            account.Payments.Add(payment);
            payment = new Payment { Amount = account.MonthlyPayment };
        }
    }

    private async Task Delete(Payment payment, string id)
    {
        editPayment.Id = payment.Id;
        var response = await auth.Client.PostAsJsonAsync($"/api/account/payment/delete", editPayment);
        if (response.IsSuccessStatusCode)
        {
            account.Payments.Remove(payment);
            await js.InvokeVoidAsync("modal", id, "hide");
        }
    }

    private async Task Save(Payment payment, string id)
    {
        editPayment.Id = payment.Id;
        var response = await auth.Client.PutAsJsonAsync($"/api/account/payment", editPayment);
        if (response.IsSuccessStatusCode)
        {
            payment.Date = editPayment.Date;
            payment.Amount = editPayment.Amount;
            editPayment = new Payment { Amount = account.MonthlyPayment };
            await js.InvokeVoidAsync("modal", id, "hide");
        }
    }

    private async Task Print()
    {
        await js.InvokeVoidAsync("print");
    }
}
