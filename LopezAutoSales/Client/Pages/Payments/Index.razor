@page "/app/payments"
@attribute [Authorize(Roles = "Admin")]
@inject AuthHttp auth

<h1 class="text-center">Payments</h1>
@if (results is null)
{
    <p class="lead">Loading...</p>
}
else
{
    <div class="row">
        <div class="col">
            <label for="Buyer">Search Buyers:</label>
            <input type="text" class="form-control" id="Buyer" @bind-value="buyer" />
        </div>
        <div class="col">
            <label for="Vehicle">Search Vehicles:</label>
            <input type="text" class="form-control" id="Vehicle" @bind-value="vehicle" />
        </div>
    </div>
    <div class="d-flex">
        <div class="form-check ms-auto">
            <input type="checkbox" class="form-check-input" id="showPaid" @bind-value="showPaid">
            <label class="form-check-label" for="showPaid">Show Paid</label>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped text-center">
            <thead>
                <tr>
                    <th>
                        Buyer(s)
                    </th>
                    <th>
                        Vehicle
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (Account account in accounts)
                {
                    <tr class="@RowColor(account)">
                        <td>
                            @account.Sale.Buyers()
                        </td>
                        <td>
                            <a class="btn btn-secondary" href="/app/payments/@account.Id">
                                @account.Sale.Car.Name()
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {
    private IEnumerable<Account> accounts;
    private IEnumerable<Account> results;
    private bool _showPaid = false;
    private bool showPaid { get { return _showPaid; } set { _showPaid = value; Search(); } }
    private string _buyer;
    private string buyer { get { return _buyer; } set { _buyer = value; Search(); } }
    private string _vehicle;
    private string vehicle { get { return _vehicle; } set { _vehicle = value; Search(); } }

    protected override async Task OnInitializedAsync()
    {
        results = await auth.Client.GetFromJsonAsync<List<Account>>("/api/account");
        accounts = results.Where(x => x.IsPaid == false);
        await base.OnInitializedAsync();
    }

    private void Search()
    {
        IEnumerable<Account> search = results;
        string query;
        if (!showPaid)
            search = search.Where(x => x.IsPaid == false);
        if (!string.IsNullOrEmpty(buyer))
        {
            query = buyer.ToUpper();
            search = search.Where(x => x.Sale.Buyer.ToUpper().Contains(query) || (!string.IsNullOrEmpty(x.Sale.CoBuyer) && x.Sale.CoBuyer.ToUpper().Contains(query)));
        }
        if (!string.IsNullOrEmpty(vehicle))
        {
            query = vehicle.ToUpper();
            search = search.Where(x => x.Sale.Car.Name().ToUpper().Contains(query));
        }
        accounts = search;
    }

    private string RowColor(Account account)
    {
        if (account.IsPaid)
            return "table-success";
        if (account.HasContractExpired())
            return "table-danger";
        return string.Empty;
    }
}